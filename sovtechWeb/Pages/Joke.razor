@using sovtechWeb.Data

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Category</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body">
                <div class="card-body">
                    Joke: @Value
                </div>
                <div class="card-body">
                    <img src="@ImageUrl" />
                </div>
            </div>
            <div class="modal-footer">
                <div class="card-footer font-weight-bold">Created On:@DateCreated</div>
                <button type="button" class="btn btn-primary" @onclick=@ModalOk>OK</button>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string Category { get; set; }
    public string? Value { get; set; }
    public string? DateCreated { get; set; }
    public string? ImageUrl { get; set; }

    JokeViewModel jokeViewModel = new JokeViewModel();

    protected override async Task OnInitializedAsync()
    {
        using (var httpclient = new HttpClient())
            jokeViewModel = await httpclient.GetFromJsonAsync<JokeViewModel>($"http://localhost:3000/chuck/randomJoke/{Category}");

        Value = jokeViewModel?.Value;
        DateCreated = jokeViewModel?.CreatedAt.ToString("dd-MMM-yyyy");
        ImageUrl = jokeViewModel?.IconUrl;
    }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
}
